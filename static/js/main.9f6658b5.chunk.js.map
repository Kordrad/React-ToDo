{"version":3,"sources":["todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoStyle","styled","div","_templateObject","Buttons","_templateObject2","List","_templateObject3","ToDo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkLocalTasks","localStorage","getItem","length","setState","tasks","console","log","concat","state","JSON","parse","addTask","prevState","toConsumableArray","saveToLocalStorage","removeTask","slice","clearTasks","updateInputsArray","e","updatedArray","Number","target","attributes","getNamedItem","value","renderTasks","map","task","index","react_default","a","createElement","key","data-key","onChange","onInput","onKeyUp","clear","data","stringify","filter","Boolean","setItem","addAutoResize","tx","document","getElementsByTagName","i","setAttribute","scrollHeight","addEventListener","style","height","date","Date","toString","split","splice","join","_this2","setTimeout","onClick","Component","StyledApp","App_templateObject","App","className","todo","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f6658b5.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport styled, {css} from 'styled-components'\r\n\r\nconst TodoStyle = styled.div`\r\n  background-color: white;\r\n  box-shadow: 0 0 50px 10px rgba(0,0,0,0.5);\r\n  h1 {\r\n    margin: 0;\r\n    padding-top: 5%;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\nconst Buttons = styled.div`\r\n   display: flex;\r\n   padding-top: 20px;\r\n   width: 100%;\r\n   & > button {\r\n      width: 33.333%;\r\n      border: none;\r\n      box-sizing: border-box;\r\n      padding: 2% 1%;\r\n      &:last-child {\r\n        background-color: #ff5c5c;\r\n      }\r\n   }\r\n`;\r\nconst List = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 20px 0;\r\n    textarea {\r\n      border: none;\r\n      border-bottom: 1px dotted rgba(40,44,52,0.5) ;\r\n      box-sizing: border-box;\r\n      padding: 2% 5%;\r\n      overflow: hidden;\r\n      resize: none;\r\n      width: 90%;\r\n      margin: 0 auto;\r\n      &:last-child {\r\n       border: none; \r\n      }\r\n    }\r\n`;\r\n\r\nclass ToDo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: `Today is ${(new Date()).toString().split(' ').splice(1, 3).join(' ')}`,\r\n            tasks: [],\r\n        }\r\n    }\r\n\r\n    //### React\r\n    componentDidMount() {\r\n        this.checkLocalTasks();\r\n        setTimeout(() => {\r\n            this.addAutoResize()\r\n        }, 10)\r\n    }\r\n\r\n\r\n    //### Online\r\n    //If you have task saved on PC , this function load data\r\n    checkLocalTasks = () => {\r\n        if ((localStorage.getItem('tasks') === null) || (localStorage.getItem('tasks').length === 0)) {\r\n            this.setState({tasks: ['Click me to edit!']},\r\n                () => {\r\n                    console.log(`You have ${this.state.tasks.length} tasks`)\r\n                })\r\n\r\n        } else {\r\n            this.setState({tasks: JSON.parse(localStorage.getItem('tasks')).tasks},\r\n                () => {\r\n                    console.log(`You have ${this.state.tasks.length} tasks`)\r\n                })\r\n        }\r\n    };\r\n\r\n    //Add Empty task onClick button \"Add\"\r\n    addTask = () => {\r\n        this.setState(prevState => ({tasks: [...prevState.tasks, `Task number ${this.state.tasks.length + 1}`]}),\r\n            () => this.saveToLocalStorage());\r\n    };\r\n    //Remove Last task onClick button \"Remove\"\r\n    removeTask = () => {\r\n        this.setState(prevState => ({tasks: [...prevState.tasks].slice(0, -1)}),\r\n            () => this.saveToLocalStorage());\r\n    };\r\n    //Clear All tasks onClick button \"Clear\"\r\n    clearTasks = () => {\r\n        this.setState({tasks: []},\r\n            () => this.saveToLocalStorage());\r\n    };\r\n\r\n    //Update States if you change data in input\r\n    updateInputsArray = (e) => {\r\n        const updatedArray = [...this.state.tasks];\r\n        updatedArray[Number(e.target.attributes.getNamedItem('data-key').value)] = e.target.value;\r\n        this.setState({tasks: updatedArray,});\r\n    };\r\n\r\n    //Print all tasks\r\n    renderTasks = () => {\r\n        return (\r\n            this.state.tasks.map((task, index) =>\r\n                <textarea value={task}\r\n                          key={index}\r\n                          data-key={index}\r\n                          onChange={(e)=>{\r\n                              this.updateInputsArray(e);\r\n                              this.onInput(e)\r\n                          }}\r\n                          onKeyUp={this.saveToLocalStorage}\r\n                />)\r\n\r\n        )\r\n    };\r\n\r\n\r\n    //### Local Data\r\n    saveToLocalStorage = () => {\r\n        if (this.state.tasks.length === 0) {\r\n            localStorage.clear()\r\n        } else {\r\n            let data = JSON.stringify({tasks: this.state.tasks.filter(Boolean)});\r\n            localStorage.setItem('tasks', data);\r\n        }\r\n    };\r\n\r\n    //### Style\r\n    addAutoResize = () => {\r\n        const tx = document.getElementsByTagName('textarea');\r\n        for (let i = 0; i < tx.length; i++) {\r\n            tx[i].setAttribute('style', 'height:' + (tx[i].scrollHeight) + 'px;overflow-y:hidden;');\r\n            tx[i].addEventListener(\"input\", () => onInput, false);\r\n        }\r\n        const onInput = () => {\r\n            this.style.height = 'auto';\r\n            this.style.height = (this.scrollHeight) + 'px';\r\n        };\r\n    };\r\n\r\n    onInput = (e) => {\r\n        e.target.style.height = 'auto';\r\n        e.target.style.height = (e.target.scrollHeight) + 'px';\r\n    };\r\n\r\n    render() {\r\n        const {date} = this.state;\r\n        return (\r\n            <TodoStyle>\r\n                <h1>ToDo List</h1>\r\n                {date}\r\n                <Buttons>\r\n                    <button onClick={this.addTask}>Add</button>\r\n                    <button onClick={this.removeTask}>Remove</button>\r\n                    <button onClick={this.clearTasks}>Clear</button>\r\n                </Buttons>\r\n                <List>\r\n                    {this.renderTasks()}\r\n                </List>\r\n            </TodoStyle>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo","import React ,{ Component } from 'react';\r\n\r\nimport './App.css';\r\nimport ToDo from \"./todo\";\r\nimport styled, { css } from 'styled-components'\r\n\r\nconst StyledApp = styled.div`\r\n  padding: 75px 0;\r\n  & > * {\r\n    margin: 0 auto;\r\n    width: 300px;\r\n    min-height: 500px;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <StyledApp className=\"App\">\r\n                <ToDo/>\r\n            </StyledApp>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}