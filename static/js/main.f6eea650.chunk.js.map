{"version":3,"sources":["todo.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkLocalTasks","localStorage","getItem","console","log","setState","tasks","JSON","parse","concat","state","length","addTask","prevState","toConsumableArray","saveToLocalStorage","removeTask","slice","clearTasks","updateInputsArray","e","updatedArray","Number","target","attributes","getNamedItem","value","renderTasks","map","task","index","react_default","a","createElement","key","data-key","type","onChange","onKeyUp","clear","data","stringify","filter","Boolean","setItem","date","Date","toString","split","splice","join","onClick","Component","App","className","todo","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA8FeA,cA3FX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcVQ,gBAAkB,WACwB,OAAlCC,aAAaC,QAAQ,SACrBC,QAAQC,IAAI,qBAEZX,EAAKY,SAAS,CAACC,MAAOC,KAAKC,MAAMP,aAAaC,QAAQ,UAAUI,OAC5D,WAAMH,QAAQC,IAAR,YAAAK,OAAwBhB,EAAKiB,MAAMJ,MAAMK,OAAzC,cApBClB,EAyBnBmB,QAAU,WACNnB,EAAKY,SAAS,SAAAQ,GAAS,MAAK,CAACP,MAAK,GAAAG,OAAAf,OAAAoB,EAAA,EAAApB,CAAMmB,EAAUP,OAAhB,gBAAAG,OAAsChB,EAAKiB,MAAMJ,MAAMK,OAAO,OAC5F,kBAAMlB,EAAKsB,wBA3BAtB,EA8BnBuB,WAAa,WACTvB,EAAKY,SAAS,SAAAQ,GAAS,MAAK,CAACP,MAAOZ,OAAAoB,EAAA,EAAApB,CAAImB,EAAUP,OAAOW,MAAM,GAAI,KAC/D,kBAAMxB,EAAKsB,wBAhCAtB,EAmCnByB,WAAa,WACTzB,EAAKY,SAAS,CAACC,MAAO,IAClB,kBAAMb,EAAKsB,wBArCAtB,EAyCnB0B,kBAAoB,SAACC,GACjB,IAAMC,EAAY3B,OAAAoB,EAAA,EAAApB,CAAOD,EAAKiB,MAAMJ,OACpCe,EAAaC,OAAOF,EAAEG,OAAOC,WAAWC,aAAa,YAAYC,QAAUN,EAAEG,OAAOG,MACpFjC,EAAKY,SAAS,CAACC,MAAOe,KA5CP5B,EAgDnBkC,YAAc,WACV,OACIlC,EAAKiB,MAAMJ,MAAMsB,IAAI,SAACC,EAAMC,GAAP,OACjBC,EAAAC,EAAAC,cAAA,SAAOP,MAAOG,EACPK,IAAKJ,EACLK,WAAUL,EACVM,KAAM,OACNC,SAAU5C,EAAK0B,kBACfmB,QAAS7C,EAAKsB,wBAxDdtB,EAgEnBsB,mBAAqB,WACjB,GAAgC,IAA5BtB,EAAKiB,MAAMJ,MAAMK,OACjBV,aAAasC,YACV,CACH,IAAIC,EAAOjC,KAAKkC,UAAU,CAACnC,MAAOb,EAAKiB,MAAMJ,MAAMoC,OAAOC,WAC1D1C,aAAa2C,QAAQ,QAASJ,KAnElC/C,EAAKiB,MAAQ,CACTmC,MAAO,IAAIC,MAAQC,WAAWC,MAAM,KAAKC,OAAO,EAAG,GAAGC,KAAK,KAC3D5C,MAAO,IAJIb,mFAUfG,KAAKI,mDAgEA,IACE6C,EAAQjD,KAAKc,MAAbmC,KACP,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACCY,EACDd,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQkB,QAASvD,KAAKgB,SAAtB,OACAmB,EAAAC,EAAAC,cAAA,UAAQkB,QAASvD,KAAKoB,YAAtB,UACAe,EAAAC,EAAAC,cAAA,UAAQkB,QAASvD,KAAKsB,YAAtB,UAEHtB,KAAK+B,sBAtFHyB,aCaJC,mLARP,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACXvB,EAAAC,EAAAC,cAACsB,EAAD,cAJEH,aCOET,QACW,cAA7Ba,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f6eea650.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass ToDo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: (new Date()).toString().split(' ').splice(1, 3).join(' '),\r\n            tasks: [],\r\n        }\r\n    }\r\n\r\n    //### React\r\n    componentDidMount() {\r\n        this.checkLocalTasks();\r\n    }\r\n\r\n    //### Online\r\n    //If you have task saved on PC , this function load data\r\n    checkLocalTasks = () => {\r\n        if (localStorage.getItem('tasks') === null) {\r\n            console.log(\"You no have tasks\");\r\n        } else {\r\n            this.setState({tasks: JSON.parse(localStorage.getItem('tasks')).tasks},\r\n                ()=> {console.log(`You have ${this.state.tasks.length} tasks`)})\r\n        }\r\n    };\r\n\r\n    //Add Empty task onClick button \"Add\"\r\n    addTask = () => {\r\n        this.setState(prevState => ({tasks: [...prevState.tasks, `Task number ${this.state.tasks.length+1}`]}),\r\n            () => this.saveToLocalStorage());\r\n    };\r\n    //Remove Last task onClick button \"Remove\"\r\n    removeTask = () => {\r\n        this.setState(prevState => ({tasks: [...prevState.tasks].slice(0, -1)}),\r\n            () => this.saveToLocalStorage());\r\n    };\r\n    //Clear All tasks onClick button \"Clear\"\r\n    clearTasks = () => {\r\n        this.setState({tasks: []},\r\n            () => this.saveToLocalStorage());\r\n    };\r\n\r\n    //Update States if you change data in input\r\n    updateInputsArray = (e) => {\r\n        const updatedArray = [...this.state.tasks];\r\n        updatedArray[Number(e.target.attributes.getNamedItem('data-key').value)] = e.target.value;\r\n        this.setState({tasks: updatedArray,});\r\n    };\r\n\r\n    //Print all tasks\r\n    renderTasks = () => {\r\n        return (\r\n            this.state.tasks.map((task, index) =>\r\n                <input value={task}\r\n                       key={index}\r\n                       data-key={index}\r\n                       type={'text'}\r\n                       onChange={this.updateInputsArray}\r\n                       onKeyUp={this.saveToLocalStorage}\r\n                />)\r\n\r\n        )\r\n    };\r\n\r\n\r\n    //### Local Data\r\n    saveToLocalStorage = () => {\r\n        if (this.state.tasks.length === 0) {\r\n            localStorage.clear()\r\n        } else {\r\n            let data = JSON.stringify({tasks: this.state.tasks.filter(Boolean)});\r\n            localStorage.setItem('tasks', data);\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const {date} = this.state;\r\n        return (\r\n            <div>\r\n                <h1>ToDo List</h1>\r\n                {date}\r\n                <div>\r\n                    <button onClick={this.addTask}>Add</button>\r\n                    <button onClick={this.removeTask}>Remove</button>\r\n                    <button onClick={this.clearTasks}>Clear</button>\r\n                </div>\r\n                {this.renderTasks()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo","import React ,{ Component } from 'react';\r\n\r\nimport './App.css';\r\nimport ToDo from \"./todo\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <ToDo/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}